---
- name: Deploy Secure Portfolio Web Server (HTTPS)
  hosts: webservers
  tasks:
    
    # --- 1. INSTALLATION AND SETUP ---

    - name: Ensure essential packages are installed
      ansible.builtin.apt:
        name: 
          - certbot
          - python3-certbot-nginx 
          - python3-certbot-dns-route53 
          - ca-certificates
          - curl
          - gnupg
          - python3-pip
          - lsof
          - net-tools
          - apt-transport-https # Needed for adding repositories
          - software-properties-common # Needed for adding repositories
        state: present
        update_cache: yes
      become: yes

    - name: Install Docker via official Convenience Script
      ansible.builtin.shell: 
        cmd: curl -fsSL https://get.docker.com | sh
      args:
        creates: /usr/bin/docker # Prevents re-running if docker exists
      become: yes

    - name: Install Python Docker Module
      ansible.builtin.apt:
        name: python3-docker
        state: present
      become: yes
      
    # --- NEW: Install Trivy for Container Scanning ---
    - name: Add Trivy GPG key
      ansible.builtin.get_url:
        url: https://aquasecurity.github.io/trivy-repo/deb/public.key
        dest: /usr/share/keyrings/trivy.asc
        mode: '0644'
      become: yes

    - name: Add Trivy APT repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/trivy.asc] https://aquasecurity.github.io/trivy-repo/deb {{ ansible_distribution_release }} main"
        state: present
        filename: trivy
        update_cache: yes
      become: yes

    - name: Install Trivy
      ansible.builtin.apt:
        name: trivy
        state: present
      become: yes

    # --- 2. DEPLOY CONTENT AND PREPARE HOST DIRECTORIES ---

    - name: Create required directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /app/html
        - /app/config
        - /app/api
        - /etc/letsencrypt/
        - /root/.aws
      become: yes

    - name: Place custom index.html (File copy from repo)
      ansible.builtin.copy:
        src: files/index.html
        dest: /app/html/index.html
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container
      become: yes
      
    - name: Place custom resume.html (File copy from repo)
      ansible.builtin.copy:
        src: files/resume.html 
        dest: /app/html/resume.html
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container
      become: yes

    - name: Copy Node.js API files (server.js, package.json, Dockerfile)
      ansible.builtin.copy:
        src: files/api/
        dest: /app/api/
        owner: root
        group: root
        mode: '0755' # Ensure Dockerfile is executable if needed, though usually not
      become: yes

    # --- 3. SECURITY AND CREDENTIALS ---
    - name: Install PyLint for Policy-as-Code Check (Simulated)
      ansible.builtin.apt:
        name: pylint 
        state: present
      become: yes

    - name: Execute simulated code policy check
      ansible.builtin.shell: |
        echo "Running pylint against placeholder file to demonstrate policy check..."
        # Example check (adjust linters/rules as needed for real policy)
        pylint --disable=all --enable=W0107 /app/api/server.js || true 
        # The '|| true' keeps the pipeline running for this example.
        # Remove '|| true' for real enforcement to fail the build on lint errors.
      args:
        chdir: /app/api/
      changed_when: false # This task doesn't change system state
      become: yes

    - name: Run Certbot DNS Challenge to obtain SSL certificate
      ansible.builtin.shell: |
        # Check if cert exists and is valid for >30 days
        if openssl x509 -checkend 2592000 -noout -in /etc/letsencrypt/live/shayleeczech.com/fullchain.pem; then
          echo "Certificate already exists and is valid. Skipping acquisition."
          exit 0
        fi
        # Obtain or renew cert
        certbot certonly --dns-route53 -d shayleeczech.com -d www.shayleeczech.com --non-interactive --agree-tos -m shayleeczech@gmail.com --no-self-upgrade --force-renewal
      register: certbot_result
      changed_when: "'Successfully received certificate' in certbot_result.stdout or 'renewed' in certbot_result.stdout"
      become: yes


    # --- 4. DEPLOY API CONTAINER ---
    
    - name: Build Stats API image
      community.docker.docker_image:
        name: stats-api
        tag: latest
        source: build
        build:
          path: /app/api/ # Use files copied to the host machine
          pull: yes # Ensure base image is up-to-date
        state: present
        force_tag: yes # Overwrite if 'latest' tag already exists
      become: yes
      
    # --- NEW: Run Trivy Scan on Built Image ---
    - name: Scan stats-api image for vulnerabilities
      ansible.builtin.command: >
        trivy image
        --exit-code 1
        --severity HIGH,CRITICAL
        --ignore-unfixed
        --ignore-ids CVE-2024-21538  # <-- Make sure this line is present
        stats-api:latest
      register: trivy_scan_result
      changed_when: false
      failed_when: trivy_scan_result.rc != 0
      become: yes

    - name: Start Stats API container
      community.docker.docker_container:
        name: stats-api
        image: stats-api:latest # Use the image built and scanned
        state: started
        restart_policy: always
        network_mode: "host" # Shares host network so Nginx can proxy via localhost:3000
        recreate: true # Ensure container uses the newly built image
      become: yes
      
    # --- RESILIENCE CHECK (FINAL FIX) ---
    - name: Verify API Port 3000 is listening (Container Health Check)
      ansible.builtin.wait_for:
        port: 3000
        host: 127.0.0.1 # Check localhost
        state: started
        delay: 5 # Initial delay
        timeout: 60 # Max wait time
      changed_when: false
      become: yes

    # --- 5. DEPLOY NGINX AND CLEANUP ---

    - name: Deploy Nginx SSL Configuration File
      ansible.builtin.copy:
        src: nginx_ssl.conf
        dest: /app/config/nginx.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container # Notify handler to restart Nginx if conf changes
      become: yes

    - name: Ensure Nginx container is running with latest config
      community.docker.docker_container:
        name: portfolio-web
        image: nginx:latest
        state: started
        restart_policy: always
        volumes:
          - /app/html:/usr/share/nginx/html:ro
          - /etc/letsencrypt:/etc/letsencrypt:ro
          - /app/config/nginx.conf:/etc/nginx/conf.d/default.conf:ro
        network_mode: "host"
        recreate: true # Force recreate to pick up volume changes if needed (like cert renewal)
      become: yes

  # --- HANDLERS ---
  handlers:
    - name: Restart Nginx Container
      community.docker.docker_container:
        name: portfolio-web
        state: started # Ensures it's running
        restart: yes # Specifically triggers a restart
      become: yes
