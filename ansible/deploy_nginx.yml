---
- name: Deploy Secure Portfolio Web Server (HTTPS)
  hosts: webservers
  tasks:
    
    # --- 1. INSTALLATION AND SETUP ---

    - name: 1. Ensure essential packages are installed for Certbot and Nginx
      ansible.builtin.apt:
        name: 
          - certbot
          - python3-certbot-nginx 
          - python3-certbot-dns-route53 
          - ca-certificates
          - curl
          - gnupg
          - python3-pip
          - lsof # ADDED LSOF FOR DIAGNOSTICS
        state: present
        update_cache: yes
      become: yes

    - name: 2. Install Docker via official Convenience Script (quick and reliable install)
      ansible.builtin.shell: 
        cmd: curl -fsSL https://get.docker.com | sh
      become: yes

    - name: 3. Install Python Docker Module
      ansible.builtin.apt:
        name: python3-docker
        state: present
      become: yes

    # --- 2. DEPLOY CONTENT AND PREPARE HOST DIRECTORIES ---

    - name: 4. Create required directories (Including new /app/api for stats microservice)
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /app/html
        - /app/config
        - /app/api # NEW: Directory for Node.js API files
        - /etc/letsencrypt/ # Only directories needed for static site + certs
        - /root/.aws # Create AWS directory for credentials file
      become: yes

    - name: 5. Place custom index.html (File copy from repo)
      ansible.builtin.copy:
        src: index.html 
        dest: /app/html/index.html
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container
      become: yes

    - name: 5b. Copy all aesthetic assets (CSS, Images, JS)
      ansible.builtin.copy:
        src: assets/
        dest: /app/html/
        owner: root
        group: root
        mode: '0755'
      notify: Restart Nginx Container
      become: yes
      
    # NEW BLOCK: Deploy and Start Stats API Service
    - name: 5c. Copy Stats API files and Dockerfile to /app/api
      ansible.builtin.copy:
        src: api/
        dest: /app/api/
        owner: root
        group: root
        mode: '0644' # Files will be 0644, directories will be 0755
      become: yes
      
    - name: 5d. Build and start Stats API container
      community.docker.docker_container:
        name: stats-api
        image: stats-api:latest
        state: started
        restart_policy: always
        # We need the build_context and path to the Dockerfile
        build:
          path: /app/api
          dockerfile: Dockerfile
        volumes:
          # Mount the source code directory to allow live changes (optional, but good for dev)
          - /app/api:/usr/src/app
        # CRITICAL: Use host network mode so Nginx (and client JS) can talk to it via localhost:3000
        network_mode: "host" 
        recreate: true
      become: yes
    # END NEW BLOCK

    # --- 3. TEMPORARY CREDENTIALS FILE ---
    - name: 6. Create temporary AWS credentials file for Certbot
      ansible.builtin.copy:
        content: |
          [default]
          aws_access_key_id = {{ lookup('env', 'AWS_ACCESS_KEY_ID') }}
          aws_secret_access_key = {{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}
        dest: /root/.aws/credentials
        owner: root
        group: root
        mode: '0600' # Secure permissions
      become: yes
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

    - name: 7. Run Certbot DNS Challenge to obtain SSL certificate
      ansible.builtin.shell: |
        # Check if cert exists; if so, skip the whole script.
        if [ -f /etc/letsencrypt/live/shayleeczech.com/fullchain.pem ]; then
          echo "Certificate already exists. Skipping acquisition."
          exit 0
        fi
        
        # Execute Certbot without the problematic Ansible arguments
        certbot certonly --dns-route53 -d shayleeczech.com -d www.shayleeczech.com --non-interactive --agree-tos -m shayleeczech@gmail.com --no-self-upgrade
        
      register: certbot_result
      become: yes

    - name: 7b. Remove temporary AWS credentials file (SECURITY CRITICAL)
      ansible.builtin.file:
        path: /root/.aws/credentials
        state: absent
      become: yes

    # --- 4. DEPLOY SSL CONFIG AND START CONTAINERS ---

    - name: 8. Deploy Nginx SSL Configuration File
      ansible.builtin.copy:
        src: nginx_ssl.conf
        dest: /app/config/nginx.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container
      become: yes

    - name: 9. Final Aggressive Port Cleanup Before Container Start
      ansible.builtin.shell: |
        fuser -k -n tcp 80 || true # Forcefully kill any process using TCP Port 80
        fuser -k -n tcp 443 || true # ADDED: Ensure 443 is clear
        fuser -k -n tcp 3000 || true # NEW: Clear port 3000 for stats API
        systemctl restart docker || true # Force restart to clear lingering network bindings
        sleep 10
      become: yes
      ignore_errors: yes

    - name: 10. Start Final Nginx Container with SSL
      community.docker.docker_container:
        name: portfolio-web
        image: nginx:latest
        state: started
        restart_policy: always
        volumes:
          - /app/html:/usr/share/nginx/html:ro
          - /etc/letsencrypt:/etc/letsencrypt:ro
          - /app/config/nginx.conf:/etc/nginx/conf.d/default.conf:ro # CRITICAL FIX: Mount config file
        network_mode: "host" # <<< CRITICAL FIX: Use host network stack
        recreate: true
      become: yes

  # --- HANDLERS ---
  handlers:
    - name: Restart Nginx Container
      community.docker.docker_container:
        name: portfolio-web
        image: nginx:latest
        state: started
        restart_policy: always
        volumes:
          - /app/html:/usr/share/nginx/html:ro
          - /etc/letsencrypt:/etc/letsencrypt:ro
          - /app/config/nginx.conf:/etc/nginx/conf.d/default.conf:ro # CRITICAL FIX: Mount config file
        network_mode: "host" # <<< CRITICAL FIX: Use host network stack
        recreate: true
      become: yes
