---
- name: Deploy Secure Portfolio Web Server (HTTPS)
  hosts: webservers
  tasks:
    
    # --- 1. INSTALLATION AND SETUP ---

    - name: Ensure essential packages are installed for Certbot and Nginx
      ansible.builtin.apt:
        name: 
          - certbot
          - python3-certbot-nginx 
          - python3-certbot-dns-route53 
          - ca-certificates
          - curl
          - gnupg
          - python3-pip
          - lsof
        state: present
        update_cache: yes
      become: yes

    - name: Install Docker via official Convenience Script
      ansible.builtin.shell: 
        cmd: curl -fsSL https://get.docker.com | sh
      become: yes

    - name: Install Python Docker Module
      ansible.builtin.apt:
        name: python3-docker
        state: present
      become: yes

    # --- 2. DEPLOY CONTENT AND PREPARE HOST DIRECTORIES ---

    - name: Create required directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /app/html
        - /app/config
        - /app/api
        - /etc/letsencrypt/
        - /root/.aws
      become: yes

    - name: Place custom index.html (File copy from repo)
      ansible.builtin.copy:
        src: index.html
        dest: /app/html/index.html
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container
      become: yes
      
    - name: Place custom resume.html (File copy from repo)
      ansible.builtin.copy:
        src: resume.html 
        dest: /app/html/resume.html
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container
      become: yes

    - name: Copy Node.js API files (server.js, package.json, Dockerfile)
      ansible.builtin.copy:
        src: api/
        dest: /app/api/
        owner: root
        group: root
        mode: '0755'
      become: yes


    # --- 3. TEMPORARY CREDENTIALS FILE ---
    - name: Create temporary AWS credentials file for Certbot
      ansible.builtin.copy:
        content: |
          [default]
          aws_access_key_id = {{ lookup('env', 'AWS_ACCESS_KEY_ID') }}
          aws_secret_access_key = {{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}
        dest: /root/.aws/credentials
        owner: root
        group: root
        mode: '0600' # Secure permissions
      become: yes
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

    - name: Run Certbot DNS Challenge to obtain SSL certificate
      ansible.builtin.shell: |
        if [ -f /etc/letsencrypt/live/shayleeczech.com/fullchain.pem ]; then
          echo "Certificate already exists. Skipping acquisition."
          exit 0
        fi
        certbot certonly --dns-route53 -d shayleeczech.com -d www.shayleeczech.com --non-interactive --agree-tos -m shayleeczech@gmail.com --no-self-upgrade
      register: certbot_result
      become: yes


    # --- 4. DEPLOY API CONTAINER ---
    
    - name: Build Stats API image
      community.docker.docker_image:
        name: stats-api
        tag: latest
        source: build
        build:
          path: /app/api/ # Use files copied to the host machine
          pull: yes
        state: present
        force_tag: yes
      become: yes

    - name: Start Stats API container
      community.docker.docker_container:
        name: stats-api
        image: stats-api:latest # Use the image built in the previous step
        state: started
        restart_policy: always
        network_mode: "host" # Shares host network so Nginx can proxy via localhost:3000
        recreate: true
      become: yes

    # --- 5. DEPLOY NGINX AND CLEANUP ---

    - name: Deploy Nginx SSL Configuration File
      ansible.builtin.copy:
        src: nginx_ssl.conf
        dest: /app/config/nginx.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container
      become: yes

    - name: Final Aggressive Port Cleanup Before Container Start
      ansible.builtin.shell: |
        fuser -k -n tcp 80 || true
        fuser -k -n tcp 443 || true
        systemctl restart docker || true
        sleep 10
      become: yes
      ignore_errors: yes

    - name: Start Final Nginx Container with SSL
      community.docker.docker_container:
        name: portfolio-web
        image: nginx:latest
        state: started
        restart_policy: always
        volumes:
          - /app/html:/usr/share/nginx/html:ro
          - /etc/letsencrypt:/etc/letsencrypt:ro
          - /app/config/nginx.conf:/etc/nginx/conf.d/default.conf:ro
        network_mode: "host"
        recreate: true
      become: yes
      
    - name: Remove temporary AWS credentials file (SECURITY CRITICAL)
      ansible.builtin.file:
        path: /root/.aws/credentials
        state: absent
      become: yes

  # --- HANDLERS ---
  handlers:
    - name: Restart Nginx Container
      community.docker.docker_container:
        name: portfolio-web
        image: nginx:latest
        state: started
        restart_policy: always
        volumes:
          - /app/html:/usr/share/nginx/html:ro
          - /etc/letsencrypt:/etc/letsencrypt:ro
          - /app/config/nginx.conf:/etc/nginx/conf.d/default.conf:ro
        network_mode: "host"
        recreate: true
      become: yes
