---
- name: Deploy Secure Portfolio Web Server (HTTPS)
  hosts: webservers
  tasks:
    
    # --- 1. INSTALLATION AND SETUP ---

    - name: Ensure essential packages are installed
      ansible.builtin.apt:
        name: 
          - certbot
          - python3-certbot-nginx 
          - python3-certbot-dns-route53 
          - ca-certificates
          - curl
          - gnupg
          - python3-pip
          - lsof
          - net-tools
          - apt-transport-https # Needed for Trivy repo
        state: present
        update_cache: yes
      become: yes

    # --- Install Trivy via APT ---
    - name: Add Trivy GPG key
      ansible.builtin.apt_key:
        url: https://aquasecurity.github.io/trivy-repo/deb/public.key
        state: present
      become: yes
      
    - name: Add Trivy APT repository
      ansible.builtin.apt_repository:
        repo: deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main
        state: present
        filename: trivy
      become: yes
      
    - name: Install Trivy
      ansible.builtin.apt:
        name: trivy
        state: present
        update_cache: yes
      become: yes
      
    - name: Install Docker via official Convenience Script
      ansible.builtin.shell: 
        cmd: curl -fsSL https://get.docker.com | sh
      become: yes

    - name: Install Python Docker Module
      ansible.builtin.apt:
        name: python3-docker
        state: present
      become: yes

    # --- 2. DEPLOY CONTENT AND PREPARE HOST DIRECTORIES ---

    - name: Create required directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /app/html
        - /app/config
        - /app/api
        - /etc/letsencrypt/
        - /root/.aws
      become: yes

    - name: Place custom index.html (File copy from repo)
      ansible.builtin.copy:
        src: files/index.html 
        dest: /app/html/index.html
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container
      become: yes
      
    - name: Place custom resume.html (File copy from repo)
      ansible.builtin.copy:
        src: files/resume.html 
        dest: /app/html/resume.html
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container
      become: yes

    - name: Copy Node.js API files (server.js, package.json, Dockerfile)
      ansible.builtin.copy:
        src: files/api/ 
        dest: /app/api/
        owner: root
        group: root
        mode: '0755'
      become: yes
      
    # --- NEW: Copy the .trivyignore file ---
    - name: Copy .trivyignore file to API directory
      ansible.builtin.copy:
        src: .trivyignore # Source is relative to playbook directory (ansible/)
        dest: /app/api/.trivyignore # Destination on the EC2 instance
        owner: root
        group: root
        mode: '0644'
      become: yes

    # --- 3. SECURITY AND CREDENTIALS ---
    - name: Install PyLint for Policy-as-Code Check (Simulated)
      ansible.builtin.apt:
        name: pylint 
        state: present
      become: yes

    - name: Execute simulated code policy check
      ansible.builtin.shell: |
        echo "Running pylint against placeholder file to demonstrate policy check..."
        pylint --disable=all --enable=W0107 /app/api/server.js || true
      args:
        chdir: /app/api/
      changed_when: false
      become: yes

    # --- MODIFIED: Improved Certbot task ---
    - name: Check Certbot certificate validity and obtain/renew if needed
      ansible.builtin.shell: |
        # Check if cert exists and is valid for > 30 days
        if openssl x509 -checkend 2592000 -noout -in /etc/letsencrypt/live/shayleeczech.com/fullchain.pem > /dev/null 2>&1; then
          echo "Certificate is valid for more than 30 days. Skipping renewal."
          exit 0
        else
          echo "Certificate expiring soon or does not exist. Running Certbot."
          certbot certonly --dns-route53 -d shayleeczech.com -d www.shayleeczech.com --non-interactive --agree-tos -m shayleeczech@gmail.com --no-self-upgrade --force-renewal
        fi
      register: certbot_result
      changed_when: "'Certificate is valid' not in certbot_result.stdout" 
      become: yes


    # --- 4. DEPLOY API CONTAINER ---
    
    - name: Build Stats API image
      community.docker.docker_image:
        name: stats-api
        tag: latest
        source: build
        build:
          path: /app/api/ 
          pull: yes
        state: present
        force_tag: yes
      become: yes

    # --- MODIFIED: Run Trivy Scan using .trivyignore ---
    - name: Scan stats-api image for vulnerabilities (using .trivyignore)
      ansible.builtin.command: >
        trivy image 
        --exit-code 1 
        --severity HIGH,CRITICAL 
        --ignore-unfixed 
        stats-api:latest
      args:
        chdir: /app/api/ # Run from dir containing .trivyignore
      register: trivy_scan_result
      changed_when: false 
      failed_when: trivy_scan_result.rc != 0 
      become: yes
      
    - name: Start Stats API container
      community.docker.docker_container:
        name: stats-api
        image: stats-api:latest 
        state: started
        restart_policy: always
        network_mode: "host" 
        recreate: true
      become: yes
      
    # --- RESILIENCE CHECK ---
    - name: Verify API Port 3000 is listening
      ansible.builtin.wait_for:
        port: 3000
        host: 127.0.0.1 
        state: started
        delay: 5    
        timeout: 60 
      changed_when: false
      become: yes

    # --- 5. DEPLOY NGINX AND CLEANUP ---

    - name: Deploy Nginx SSL Configuration File
      ansible.builtin.copy:
        src: nginx_ssl.conf
        dest: /app/config/nginx.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container
      become: yes

    - name: Final Aggressive Port Cleanup Before Container Start
      ansible.builtin.shell: |
        fuser -k -n tcp 80 || true
        fuser -k -n tcp 443 || true
        systemctl restart docker || true
        sleep 10
      become: yes
      ignore_errors: yes

    - name: Start Final Nginx Container with SSL
      community.docker.docker_container:
        name: portfolio-web
        image: nginx:latest
        state: started
        restart_policy: always
        volumes:
          - /app/html:/usr/share/nginx/html:ro
          - /etc/letsencrypt:/etc/letsencrypt:ro
          - /app/config/nginx.conf:/etc/nginx/conf.d/default.conf:ro
        network_mode: "host"
        recreate: true
      become: yes

  # --- HANDLERS ---
  handlers:
    - name: Restart Nginx Container
      community.docker.docker_container:
        name: portfolio-web
        image: nginx:latest
        state: started
        restart_policy: always
        volumes:
          - /app/html:/usr/share/nginx/html:ro
          - /etc/letsencrypt:/etc/letsencrypt:ro
          - /app/config/nginx.conf:/etc/nginx/conf.d/default.conf:ro
        network_mode: "host"
        recreate: true
      become: yes

