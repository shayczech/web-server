---
- name: Deploy Secure Portfolio Web Server (HTTPS)
  hosts: webservers
  tasks:
    
    # --- 1. INSTALLATION AND SETUP ---

    - name: 1. Ensure essential packages are installed for Certbot and Nginx
      ansible.builtin.apt:
        name: 
          - certbot
          - python3-certbot-nginx 
          - python3-certbot-dns-route53 # DNS PLUGIN
          - nginx # Added Nginx to the host for certbot plugin
          - ca-certificates
          - curl
          - gnupg
          - python3-pip
          - lsof
        state: present
        update_cache: yes
      become: yes

    - name: 2. Disable and Stop Host Nginx Service (Prevents Port Conflict)
      ansible.builtin.systemd:
        name: nginx
        state: stopped
        enabled: no # This is critical: prevents automatic restart
      become: yes
      ignore_errors: yes

    - name: 3. Install Docker via official Convenience Script (quick and reliable install)
      ansible.builtin.shell: 
        cmd: curl -fsSL https://get.docker.com | sh
      become: yes

    - name: 4. Install Python Docker Module
      ansible.builtin.apt:
        name: python3-docker
        state: present
      become: yes

    - name: 5. Ensure Docker bridge network 'proxy_net' exists
      community.docker.docker_network:
        name: proxy_net
        state: present
      become: yes

    # --- 2. DEPLOY CONTENT AND PREPARE HOST DIRECTORIES ---

    - name: 6. Create required directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /app/html
        - /etc/letsencrypt/live/shayleeczech.com # Only directories needed for static site + certs
        - /root/.aws # Create AWS directory for credentials file
      become: yes

    - name: 7. Place custom index.html (File copy from repo)
      ansible.builtin.copy:
        src: index.html 
        dest: /app/html/index.html
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container
      become: yes

    # --- 3. TEMPORARY CREDENTIALS FILE (THE FINAL FIX) ---
    - name: 8. Create temporary AWS credentials file for Certbot
      ansible.builtin.copy:
        content: |
          [default]
          aws_access_key_id = {{ lookup('env', 'AWS_ACCESS_KEY_ID') }}
          aws_secret_access_key = {{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}
        dest: /root/.aws/credentials
        owner: root
        group: root
        mode: '0600' # Secure permissions
      become: yes
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"

    - name: 9. Run Certbot DNS Challenge to obtain SSL certificate
      ansible.builtin.shell: |
        # Check if cert exists; if so, skip the whole script.
        if [ -f /etc/letsencrypt/live/shayleeczech.com/fullchain.pem ]; then
          echo "Certificate already exists. Skipping acquisition."
          exit 0
        fi
        
        # Execute Certbot without the problematic Ansible arguments
        certbot certonly --dns-route53 -d shayleeczech.com -d www.shayleeczech.com --non-interactive --agree-tos -m shayleeczech@gmail.com --no-self-upgrade --force-renewal
        
      register: certbot_result
      become: yes

    # --- 4. DEPLOY SSL CONFIG AND START CONTAINERS ---

    - name: 10. Deploy Nginx SSL Configuration File
      ansible.builtin.copy:
        src: nginx_ssl.conf
        dest: /etc/nginx/sites-available/default
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx Container
      become: yes

    - name: 11. DIAGNOSTIC & AGGRESSIVE PORT CLEANUP (Final Attempt)
      ansible.builtin.shell: |
        echo "--- AGGRESSIVE PORT 80 CLEANUP & DIAGNOSTIC ---"
        
        # 1. Kill any process holding port 80 and print the output
        fuser -k -n tcp 80 || true
        
        # 2. Check if anything is STILL holding the port after fuser
        LSOF_OUTPUT=$(lsof -i :80 -t || true)
        if [ -z "$LSOF_OUTPUT" ]; then
          echo "SUCCESS: Port 80 is free."
        else
          echo "FAILURE: Processes still found holding port 80."
          for pid in $LSOF_OUTPUT; do
            ps -fp $pid
          done
        fi
        
        # 3. Restart Docker (Clears lingering bindings)
        systemctl restart docker || true
        
        # 4. Final safety sleep
        sleep 5
        echo "--- END CLEANUP ---"
      register: final_cleanup_result
      changed_when: true
      become: yes

    - name: 12. Start Final Nginx Container with SSL
      community.docker.docker_container:
        name: portfolio-web
        image: nginx:latest
        state: started
        restart_policy: always
        published_ports:
          - "80:80"
          - "443:443"
        volumes:
          - /app/html:/usr/share/nginx/html:ro
          - /etc/letsencrypt:/etc/letsencrypt:ro
        networks:
          - name: proxy_net
        recreate: true
      become: yes

  # --- HANDLERS ---
  handlers:
    - name: Restart Nginx Container
      community.docker.docker_container:
        name: portfolio-web
        image: nginx:latest
        state: started
        restart_policy: always
        published_ports:
          - "80:80"
          - "443:443"
        volumes:
          - /app/html:/usr/share/nginx/html:ro
          - /etc/letsencrypt:/etc/letsencrypt:ro
        networks:
          - name: proxy_net
        recreate: true
      become: yes