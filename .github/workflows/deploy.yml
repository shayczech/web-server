name: DevSecOps Portfolio CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

# --- PERMISSIONS YOU ADDED FOR OIDC ---
permissions:
  id-token: write  # Allows the job to request an OIDC token
  contents: read   # Allows the job to checkout the code

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-2

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Setup Node.js and Install Dependencies for Snyk (No changes) ---
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Node.js Dependencies (for Snyk Scan)
        run: npm install
        working-directory: ansible/files/api/

      # --- Snyk SAST Scan (No changes) ---
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} 
        with:
          command: monitor ansible/files/api/
          args: --fail-on=high

      - name: Clean up node_modules to prevent Ansible copy hang
        run: rm -rf ansible/files/api/node_modules
        
      # --- OIDC Configuration (No changes) ---
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::643913568924:role/GitHub-Actions-Deploy-Role # Your OIDC Role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession

      # --- PHASE 1: Terraform (IaC) (No changes) ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: infra/

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: infra/

      # --- PHASE 2: Ansible (Configuration Management) (ALL CHANGED) ---

      # --- NEW: Install AWS SSM Plugin for the runner ---
      - name: Install AWS SSM Session Manager Plugin
        run: |
          curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
          sudo dpkg -i session-manager-plugin.deb
          
      # --- CHANGED: Install Ansible AND the AWS collection ---
      - name: Install Ansible
        run: |
          pip install ansible boto3 botocore
          ansible-galaxy collection install community.docker
          ansible-galaxy collection install community.aws # <-- NEW: Needed for aws_ssm

      # --- DELETED: The "Setup SSH Key" step is gone ---

      # --- CHANGED: Get Instance ID and write new inventory for SSM ---
      - name: Get Instance ID and Update Inventory for SSM
        id: get_instance_id
        run: |
          # Get the Instance ID from the Terraform output we created
          INSTANCE_ID=$(terraform -chdir=../infra output -raw instance_id)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

          # --- Overwrite the inventory.ini file for SSM ---
          echo "[webservers]" > inventory.ini
          echo "$INSTANCE_ID" >> inventory.ini # Use Instance ID instead of IP
          
          echo "[all:vars]" >> inventory.ini
          echo "ansible_user=ubuntu" >> inventory.ini
          # Tell Ansible to use the AWS SSM connection plugin
          echo "ansible_connection=aws_ssm" >> inventory.ini
          echo "ansible_aws_ssm_region=${AWS_REGION}" >> inventory.ini
          echo "ansible_aws_ssm_target_type=instance_id" >> inventory.ini
          echo "ansible_python_interpreter=/usr/bin/python3" >> inventory.ini
          echo "ansible_become=true" >> inventory.ini
        working-directory: ansible/

      - name: Wait for SSM Agent to be Online
        run: |
          echo "Waiting for instance ${INSTANCE_ID} to be online in SSM..."
          aws ssm wait instance-information-online --instance-ids $INSTANCE_ID
          echo "Instance ${INSTANCE_ID} is online."
          
      # --- CHANGED: Run Ansible command without the private key ---
      - name: Run Ansible Playbook (via SSM)
        run: |
          ansible-playbook -i inventory.ini deploy_nginx.yml
        working-directory: ansible/