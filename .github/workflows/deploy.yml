name: DevSecOps Portfolio CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering
# --- ADD THIS BLOCK TO THE TOP OF THE FILE ---
permissions:
  id-token: write  # Allows the job to request an OIDC token
  contents: read   # Allows the job to checkout the code
# --- END OF BLOCK ---
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # Set the AWS Region to be used by the AWS CLI and Terraform
      AWS_REGION: us-east-2

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Setup Node.js and Install Dependencies for Snyk ---
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Matches your Dockerfile base image

      - name: Install Node.js Dependencies (for Snyk Scan)
        run: npm install
        working-directory: ansible/files/api/ # Specify the directory with package.json

      # --- Snyk SAST Scan ---
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          # Ensure SNYK_TOKEN is set in GitHub repository secrets
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} 
        with:
          # Pass the path to scan as part of the command
          command: monitor ansible/files/api/
          args: --fail-on=high # Fail build if high or critical severity vulns found

      # --- *** NEW FIX: Clean up node_modules *** ---
      - name: Clean up node_modules to prevent Ansible copy hang
        run: rm -rf ansible/files/api/node_modules
        
      # --- Configure AWS Credentials (Existing) ---
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # PASTE YOUR NEW ROLE ARN HERE
          role-to-assume: arn:aws:iam::643913568924:role/GitHub-Actions-Deploy-Role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsSession # This is just a label for the logs

      # --- PHASE 1: Terraform (IaC) (Existing) ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (Downloads providers and configures S3 backend)
        id: init
        run: terraform init
        working-directory: infra/

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: infra/

      - name: Get EC2 Public IP from Terraform Output
        id: get_ip
        run: |
          # The output name MUST match the output in your outputs.tf file
          EC2_IP=$(terraform output -raw instance_public_ip)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
        working-directory: infra/

      # --- PHASE 2: Ansible (Configuration Management) (Existing) ---

      - name: Setup SSH Key for Ansible (No Passphrase)
        run: |
          mkdir -p ~/.ssh
          # Write the private key content from the GitHub Secret to a file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_runner
          chmod 600 ~/.ssh/id_rsa_runner

      - name: Install Ansible
        run: |
          pip install ansible
          # Ensure community.docker collection is installed
          ansible-galaxy collection install community.docker

      - name: Update Inventory with Live IP
        run: |
          # sed replaces the placeholder in inventory.ini 
          sed -i 's#ec2_instance_ip#${{ env.EC2_IP }}#g' inventory.ini
        working-directory: ansible/

      - name: Disable SSH Host Key Checking
        run: |
          # Creates a temporary Ansible configuration file to disable the strict check
          echo -e "[defaults]\nhost_key_checking = False\n" > ansible.cfg
        working-directory: ansible/

      - name: Run Ansible Playbook (Docker/Nginx Configuration & Security Scans)
        run: |
          ansible-playbook -i inventory.ini deploy_nginx.yml --private-key ~/.ssh/id_rsa_runner
        working-directory: ansible/

